import pandas as pd
import numpy as np
import xlrd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn.impute import SimpleImputer
from sklearn.metrics import accuracy_score
import graphviz
from sklearn.tree import plot_tree

loandata = pd.read_excel(r"C:\Users\fedey\Desktop\Bachelorarbeit\empirie\Trainingsdatensupereinfach.xlsx")
print(loandata.shape)


# First, replace any non-numeric values with NaN
loandata = loandata.apply(pd.to_numeric, errors='coerce')

# SimpleImputer object with the strategy 'median'
imputer = SimpleImputer(strategy='median')

# Fit the imputer to the data
imputer.fit(loandata)

# Filling the missing values with the median
loandata = pd.DataFrame(imputer.transform(loandata), columns=loandata.columns)

loandata = loandata[['MaritalStatus', 'Gender', 'Ruckzahlungsquote']]

ranges = [(-30, 0.0), (0.0, 0.10), (0.10, 0.20), (0.20, 0.30), (0.30, 0.40), (0.40, 0.50), (0.50, 0.60), (0.60, 0.70), (0.70, 0.80), (0.80, 0.90), (0.90, 0.999999), (0.999999, 20)]
loandata['RepaymentRange'] = pd.cut(loandata['Ruckzahlungsquote'], bins=[range[0] for range in ranges] + [ranges[-1][-1]], labels=False)

x = loandata.drop(columns=['Ruckzahlungsquote', 'RepaymentRange'])
y = loandata['RepaymentRange']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=23)

# Train a Decision Tree classifier
dt = DecisionTreeClassifier(random_state=23)
dt.fit(x_train, y_train)

# Predictions for training and test data
y_pred_train = dt.predict(x_train)
y_pred_test = dt.predict(x_test)

# Evaluation of predictions
accuracy_train = accuracy_score(y_train, y_pred_train)
accuracy_test = accuracy_score(y_test, y_pred_test)

print("Training Accuracy:", accuracy_train)
print("Test Accuracy:", accuracy_test)
# Define custom class names
class_names = ['0%', '0-10%', '10-20%', '20-30%', '30-40%', '40-50%', '50-60%', '60-70%','70-80%', '80-90%', '90-100%', '100%']

# Visualize the decision tree with customized class names and hidden value/samples information
plt.figure(figsize=(20, 10))
plot_tree(dt, feature_names=x.columns, class_names=class_names, filled=True, impurity=False, fontsize= 12)
plt.show()
